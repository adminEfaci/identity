name: Identity Module Backend CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  PYTHON_VERSION: '3.12'
  DATABASE_URL: postgresql+asyncpg://postgres:test@localhost:5432/test_identity_db

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_identity_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linting
        run: |
          flake8 src tests --max-line-length=100 --exclude=__pycache__,.venv,migrations
          ruff check src tests
      
      - name: Run type checking
        run: |
          mypy src --ignore-missing-imports --strict-optional
      
      - name: Run tests with coverage
        env:
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ALGORITHM: HS256
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=95
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Build Docker image
        run: |
          docker build -t identity-backend:${{ github.sha }} .
          docker tag identity-backend:${{ github.sha }} identity-backend:latest
      
      - name: Run Docker container test
        run: |
          docker run -d --name test-container \
            -e DATABASE_URL="${{ env.DATABASE_URL }}" \
            -e SECRET_KEY="test-secret" \
            -p 8001:8000 \
            identity-backend:latest
          
          # Wait for container to be ready
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8001/health || exit 1
          
          # Stop container
          docker stop test-container

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'